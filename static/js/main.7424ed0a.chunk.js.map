{"version":3,"sources":["components/Navbar.js","helpers/getData.js","helpers/getHistoryData.js","Redux/countries/countries.js","libraries/countryIso.js","components/Country.js","components/Search.js","components/Countries.js","components/Chart.js","components/CountryDetails.js","components/App.js","Redux/storeConfig.js","index.js"],"names":["Navbar","history","useHistory","location","useLocation","className","pathname","type","onClick","goBack","getData","a","today","Date","date","getFullYear","getMonth","getDate","fetch","request","json","response","dates","data","total","getHistoryData","country","startingDate","currentDate","LOAD","SELECT","HISTORY","IS_LOADING","initialValue","countries","isLoading","countryIso","Afghanistan","Albania","Algeria","Andorra","Angola","Anguilla","Antarctica","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Botswana","Brazil","Brunei","Bulgaria","Burundi","Cambodia","Cameroon","Canada","Chad","Chile","China","Colombia","Comoros","Croatia","Cuba","Cyprus","Czechia","Denmark","Djibouti","Dominica","Ecuador","Egypt","Eritrea","Estonia","Ethiopia","Fiji","Finland","France","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guinea","Guyana","Haiti","Honduras","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Israel","Italy","Jamaica","Japan","Jordan","Kazakhstan","Kenya","Kiribati","Kuwait","Kyrgyzstan","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macao","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Moldova","Monaco","Mongolia","Montserrat","Morocco","Mozambique","Burma","Namibia","Nauru","Nepal","Netherlands","Nicaragua","Niger","Nigeria","Niue","Norway","Oman","Pakistan","Palau","Panama","Paraguay","Peru","Philippines","Pitcairn","Poland","Portugal","Qatar","Reunion","Romania","Russia","Rwanda","Samoa","Senegal","Serbia","Montenegro","Seychelles","Singapore","Slovakia","Slovenia","Somalia","Spain","Sudan","Suriname","Swaziland","Sweden","Switzerland","Syria","Tajikistan","Tanzania","Thailand","Togo","Tokelau","Tonga","Tunisia","Turkey","Turkmenistan","Tuvalu","Uganda","Ukraine","US","Uruguay","Uzbekistan","Vanuatu","Venezuela","Vietnam","Yemen","Zambia","Zimbabwe","Country","totalConfirmed","handleClick","iso","link","toLowerCase","nameCountry","length","split","route","push","src","alt","width","height","Intl","NumberFormat","format","Search","handleChange","name","placeholder","onChange","Countries","useSelector","state","countriesReducer","dispatch","useDispatch","useState","Object","keys","filteredCountries","setFilteredCountries","loading","useEffect","payload","today_confirmed","e","text","target","value","filter","regex","RegExp","match","map","key","options","plugins","legend","labels","color","font","size","scales","y","ticks","stepSize","beginAtZero","x","LineChart","chartData","datasets","label","fill","backgroundColor","borderColor","borderWidth","pointRadius","CountryDetails","current","img","countryData","historyData","currentHistory","setChartData","useRouteMatch","path","url","tableRows","id","today_new_confirmed","category","today_new_recovered","today_new_deaths","today_recovered","today_deaths","loadHistoryThunk","exact","tableData","dataArr","handleChartData","App","currentCountry","imgLink","reducer","combineReducers","action","store","createStore","applyMiddleware","logger","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7424ed0a.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport '../styling/Navbar.css';\n\nconst Navbar = () => {\n  const history = useHistory();\n  const location = useLocation();\n  return (\n    <nav className=\"d-flex justify-content-between p-1 sticky-top\">\n      {(location.pathname !== '/') ? <button className=\"back\" type=\"button\" onClick={history.goBack}><i className=\"fas fa-chevron-left text-light\"> </i></button> : <span className=\"fw-bold text-uppercase back\">Countries</span>}\n      <span className=\"fw-light fs-6 text-lowercase\">\n        Track COVID-19\n        {location.pathname}\n      </span>\n      <div>\n        <i className=\"fas fa-microphone mx-2\" />\n        <i className=\"fas fa-cog mx-2\" />\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","const getData = async () => {\n  const today = new Date();\n  const date = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate() - 1}`;\n  const request = await fetch(` https://api.covid19tracking.narrativa.com/api/${date}`);\n  const response = await request.json();\n  const data = await response.dates[date];\n  data.total = await response.total;\n  return data;\n};\n\nexport default getData;\n\n// const display = async () => {\n//   const data = await getData();\n//   console.log('displayed data', data);\n// };\n\n// display();\n","const getHistoryData = async (country) => {\n  const today = new Date();\n  const startingDate = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate() - 7}`;\n  const currentDate = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate() - 1}`;\n  const request = await fetch(`https://api.covid19tracking.narrativa.com/api/country/${country}?date_from=${startingDate}&date_to=${currentDate}`);\n  const response = await request.json();\n  return response;\n};\n\nexport default getHistoryData;\n","import getData from '../../helpers/getData';\nimport getHistoryData from '../../helpers/getHistoryData';\n\nconst LOAD = 'covid-19-tracking-project/countries/LOAD';\nconst SELECT = 'covid-19-tracking-project/countries/SELECT';\nconst HISTORY = 'covid-19-tracking-project/countries/HISTORY';\nconst IS_LOADING = 'covid-19-tracking-project/countries/IS_LOADING';\n\nconst initialValue = {\n  countries: [],\n};\n\nconst countriesReducer = (state = initialValue, action) => {\n  switch (action.type) {\n    case IS_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case LOAD:\n      return {\n        ...state,\n        countries: action.payload.countries,\n        total: action.payload.total,\n        loading: false,\n      };\n    case SELECT:\n      return {\n        ...state,\n        currentCountry: action.payload,\n        loading: false,\n      };\n    case HISTORY:\n      return {\n        ...state,\n        currentHistory: action.payload,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nconst loadCountries = (payload) => ({\n  type: LOAD,\n  payload,\n});\n\nconst selectCountry = (payload) => ({\n  type: SELECT,\n  payload,\n});\n\nconst loadHistory = (payload) => ({\n  type: HISTORY,\n  payload,\n});\n\nconst isLoading = () => ({\n  type: IS_LOADING,\n});\n\nconst loadCountriesThunk = () => async (dispatch) => {\n  const data = await getData();\n  if (data) {\n    dispatch(loadCountries(data));\n  }\n};\n\nconst loadHistoryThunk = (current) => async (dispatch) => {\n  const data = await getHistoryData(current);\n  const { dates } = data;\n  if (dates) {\n    dispatch(loadHistory(dates));\n  }\n};\n\nexport {\n  countriesReducer, loadCountriesThunk, selectCountry, loadHistoryThunk, isLoading,\n};\n","const countryIso = {\n  Afghanistan: 'AF',\n  Albania: 'AL',\n  Algeria: 'DZ',\n  'American Samoa': 'AS',\n  Andorra: 'AD',\n  Angola: 'AO',\n  Anguilla: 'AI',\n  Antarctica: 'AQ',\n  'Antigua and Barbuda': 'AG',\n  Argentina: 'AR',\n  Armenia: 'AM',\n  Aruba: 'AW',\n  Australia: 'AU',\n  Austria: 'AT',\n  Azerbaijan: 'AZ',\n  Bahamas: 'BS',\n  Bahrain: 'BH',\n  Bangladesh: 'BD',\n  Barbados: 'BB',\n  Belarus: 'BY',\n  Belgium: 'BE',\n  Belize: 'BZ',\n  Benin: 'BJ',\n  Bermuda: 'BM',\n  Bhutan: 'BT',\n  Bolivia: 'BO',\n  'Bosnia and Herzegovina': 'BA',\n  Botswana: 'BW',\n  'Bouvet Island': 'BV',\n  Brazil: 'BR',\n  'British Indian Ocean Territory': 'IO',\n  Brunei: 'BN',\n  Bulgaria: 'BG',\n  'Burkina Faso': 'BF',\n  Burundi: 'BI',\n  Cambodia: 'KH',\n  Cameroon: 'CM',\n  Canada: 'CA',\n  'Cabo Verde': 'CV',\n  'Cayman Islands': 'KY',\n  'Central African Republic': 'CF',\n  Chad: 'TD',\n  Chile: 'CL',\n  China: 'CN',\n  'Christmas Island': 'CX',\n  'Cocos (Keeling) Islands': 'CC',\n  Colombia: 'CO',\n  Comoros: 'KM',\n  'Congo (Kinshasa)': 'CD',\n  'Congo (Brazzaville)': 'CG',\n  'Cook Islands': 'CK',\n  'Costa Rica': 'CR',\n  \"Cote d'Ivoire\": 'CI',\n  Croatia: 'HR',\n  Cuba: 'CU',\n  Cyprus: 'CY',\n  Czechia: 'CZ',\n  Denmark: 'DK',\n  Djibouti: 'DJ',\n  Dominica: 'DM',\n  'Dominican Republic': 'DO',\n  Ecuador: 'EC',\n  Egypt: 'EG',\n  'El Salvador': 'SV',\n  'Equatorial Guinea': 'GQ',\n  Eritrea: 'ER',\n  Estonia: 'EE',\n  Ethiopia: 'ET',\n  'Falkland Islands (Malvinas)': 'FK',\n  'Faroe Islands': 'FO',\n  Fiji: 'FJ',\n  Finland: 'FI',\n  France: 'FR',\n  'French Guiana': 'GF',\n  'French Polynesia': 'PF',\n  'French Southern Territories': 'TF',\n  Gabon: 'GA',\n  Gambia: 'GM',\n  Georgia: 'GE',\n  Germany: 'DE',\n  Ghana: 'GH',\n  Gibraltar: 'GI',\n  Greece: 'GR',\n  Greenland: 'GL',\n  Grenada: 'GD',\n  Guadeloupe: 'GP',\n  Guam: 'GU',\n  Guatemala: 'GT',\n  Guinea: 'GN',\n  'Guinea-Bissau': 'GW',\n  Guyana: 'GY',\n  Haiti: 'HT',\n  'Heard Island and Mcdonald Islands': 'HM',\n  'Holy See': 'VA',\n  Honduras: 'HN',\n  'Hong Kong': 'HK',\n  Hungary: 'HU',\n  Iceland: 'IS',\n  India: 'IN',\n  Indonesia: 'ID',\n  Iran: 'IR',\n  Iraq: 'IQ',\n  Ireland: 'IE',\n  Israel: 'IL',\n  Italy: 'IT',\n  Jamaica: 'JM',\n  Japan: 'JP',\n  Jordan: 'JO',\n  Kazakhstan: 'KZ',\n  Kenya: 'KE',\n  Kiribati: 'KI',\n  \"Korea, Democratic People's Republic of\": 'KP',\n  'Korea, South': 'KR',\n  Kuwait: 'KW',\n  Kyrgyzstan: 'KG',\n  \"Lao People's Democratic Republic\": 'LA',\n  Latvia: 'LV',\n  Lebanon: 'LB',\n  Lesotho: 'LS',\n  Liberia: 'LR',\n  Libya: 'LY',\n  Liechtenstein: 'LI',\n  Lithuania: 'LT',\n  Luxembourg: 'LU',\n  Macao: 'MO',\n  'North Macedonia': 'MK',\n  Madagascar: 'MG',\n  Malawi: 'MW',\n  Malaysia: 'MY',\n  Maldives: 'MV',\n  Mali: 'ML',\n  Malta: 'MT',\n  'Marshall Islands': 'MH',\n  Martinique: 'MQ',\n  Mauritania: 'MR',\n  Mauritius: 'MU',\n  Mayotte: 'YT',\n  Mexico: 'MX',\n  'Micronesia, Federated States of': 'FM',\n  Moldova: 'MD',\n  Monaco: 'MC',\n  Mongolia: 'MN',\n  Montserrat: 'MS',\n  Morocco: 'MA',\n  Mozambique: 'MZ',\n  Burma: 'MM',\n  Namibia: 'NA',\n  Nauru: 'NR',\n  Nepal: 'NP',\n  Netherlands: 'NL',\n  'Netherlands Antilles': 'AN',\n  'New Caledonia': 'NC',\n  'New Zealand': 'NZ',\n  Nicaragua: 'NI',\n  Niger: 'NE',\n  Nigeria: 'NG',\n  Niue: 'NU',\n  'Norfolk Island': 'NF',\n  'Northern Mariana Islands': 'MP',\n  Norway: 'NO',\n  Oman: 'OM',\n  Pakistan: 'PK',\n  Palau: 'PW',\n  'Palestinian Territory, Occupied': 'PS',\n  Panama: 'PA',\n  'Papua New Guinea': 'PG',\n  Paraguay: 'PY',\n  Peru: 'PE',\n  Philippines: 'PH',\n  Pitcairn: 'PN',\n  Poland: 'PL',\n  Portugal: 'PT',\n  'Puerto Rico': 'PR',\n  Qatar: 'QA',\n  Reunion: 'RE',\n  Romania: 'RO',\n  Russia: 'RU',\n  Rwanda: 'RW',\n  'Saint Helena': 'SH',\n  'Saint Kitts and Nevis': 'KN',\n  'Saint Lucia': 'LC',\n  'Saint Pierre and Miquelon': 'PM',\n  'Saint Vincent and the Grenadines': 'VC',\n  Samoa: 'WS',\n  'San Marino': 'SM',\n  'Sao Tome and Principe': 'ST',\n  'Saudi Arabia': 'SA',\n  Senegal: 'SN',\n  Serbia: 'RS',\n  Montenegro: 'ME',\n  Seychelles: 'SC',\n  'Sierra Leone': 'SL',\n  Singapore: 'SG',\n  Slovakia: 'SK',\n  Slovenia: 'SI',\n  'Solomon Islands': 'SB',\n  Somalia: 'SO',\n  'South Africa': 'ZA',\n  'South Georgia and the South Sandwich Islands': 'GS',\n  Spain: 'ES',\n  'Sri Lanka': 'LK',\n  Sudan: 'SD',\n  Suriname: 'SR',\n  'Svalbard and Jan Mayen': 'SJ',\n  Swaziland: 'SZ',\n  Sweden: 'SE',\n  Switzerland: 'CH',\n  Syria: 'SY',\n  'Taiwan*': 'TW',\n  Tajikistan: 'TJ',\n  Tanzania: 'TZ',\n  Thailand: 'TH',\n  'Timor-Leste': 'TL',\n  Togo: 'TG',\n  Tokelau: 'TK',\n  Tonga: 'TO',\n  'Trinidad and Tobago': 'TT',\n  Tunisia: 'TN',\n  Turkey: 'TR',\n  Turkmenistan: 'TM',\n  'Turks and Caicos Islands': 'TC',\n  Tuvalu: 'TV',\n  Uganda: 'UG',\n  Ukraine: 'UA',\n  'United Arab Emirates': 'AE',\n  'United Kingdom': 'GB',\n  US: 'US',\n  'United States Minor Outlying Islands': 'UM',\n  Uruguay: 'UY',\n  Uzbekistan: 'UZ',\n  Vanuatu: 'VU',\n  Venezuela: 'VE',\n  Vietnam: 'VN',\n  'Virgin Islands, British': 'VG',\n  'Virgin Islands, U.s.': 'VI',\n  'Wallis and Futuna': 'WF',\n  'Western Sahara': 'EH',\n  Yemen: 'YE',\n  Zambia: 'ZM',\n  Zimbabwe: 'ZW',\n};\n\nexport default countryIso;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport '../styling/Country.css';\nimport countryIso from '../libraries/countryIso';\n\nconst Country = ({ country, totalConfirmed, handleClick }) => {\n  const history = useHistory();\n  const handleRoute = (route) => {\n    history.push(route);\n  };\n\n  const iso = countryIso[country];\n\n  const link = iso ? `https://raw.githubusercontent.com/djaiss/mapsicon/33ba28808f8d32b5bae0ffada9cadd07073852e1/all/${iso.toLowerCase()}/vector.svg` : '/World_map.png';\n  const nameCountry = country.length > 18 ? country.split(' ')[0] : country;\n\n  return (\n    <button\n      className=\"country position-relative country text-light\"\n      type=\"button\"\n      onClick={() => {\n        handleRoute('/country');\n        handleClick(country);\n      }}\n    >\n      <img className=\"c-img\" src={link} alt=\"country\" width=\"100\" height=\"100\" />\n      <div className=\"bottom d-flex justify-content-end\">\n        <div className=\"text d-flex flex-column justify-content-center\">\n          <span className=\"fw-bold text-uppercase \">{nameCountry}</span>\n          <span>{Intl.NumberFormat('de-DE').format(totalConfirmed)}</span>\n        </div>\n      </div>\n      <i className=\"far fa-arrow-alt-circle-right position-absolute top-0 end-0 p-2\"> </i>\n    </button>\n  );\n};\n\nCountry.propTypes = {\n  country: PropTypes.string.isRequired,\n  totalConfirmed: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Country;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styling/Search.css';\n\nconst Search = ({ handleChange }) => (\n  <form className=\"d-flex stripe-text justify-content-between\">\n    <span className=\"m-1\">STATS BY COUNTRY</span>\n    <input className=\"search\" name=\"search\" type=\"text\" placeholder=\"Search\" onChange={handleChange} />\n  </form>\n);\n\nSearch.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default Search;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadCountriesThunk, selectCountry, isLoading } from '../Redux/countries/countries';\nimport Country from './Country';\nimport Search from './Search';\nimport '../styling/Countries.css';\n\nconst Countries = () => {\n  const countries = useSelector((state) => state.countriesReducer.countries);\n  const total = useSelector((state) => state.countriesReducer.total);\n  const dispatch = useDispatch();\n  const [filteredCountries, setFilteredCountries] = useState(Object.keys(countries));\n  const loading = useSelector((state) => state.countriesReducer.loading);\n\n  useEffect(() => {\n    dispatch(isLoading());\n    dispatch(loadCountriesThunk());\n  }, [dispatch]);\n\n  useEffect(() => {\n    setFilteredCountries(Object.keys(countries));\n  }, [countries]);\n\n  const handleClick = (country) => dispatch(selectCountry(country));\n\n  const filterCountries = (text) => Object.keys(countries).filter((country) => {\n    const regex = new RegExp(text, 'gi');\n    return country.match(regex);\n  });\n  const handleChange = (e) => setFilteredCountries(filterCountries(e.target.value));\n\n  return (\n    <div>\n      <div className=\"header d-flex p-1\">\n        <img className=\"c-img\" src=\"World_map_svg.svg\" alt=\"world-map\" width=\"50%\" height=\"50%\" />\n        <div className=\"right-side d-flex flex-column align-items-center justify-content-center w-50 fw-bold\">\n          <h1 className=\"m-0 fs-3 lh-1 fw-bolder\">WORLD</h1>\n          <span className=\"lh-1\">\n            {total && Intl.NumberFormat('de-DE').format(total.today_confirmed)}\n          </span>\n          <span className=\"lh-1\">total cases</span>\n        </div>\n      </div>\n      <Search handleChange={handleChange} />\n      {loading && <img className=\"loading-img\" src=\"virus-img.png\" alt=\"loader\" />}\n      <ul className=\"d-flex flex-wrap\">\n        {filteredCountries && filteredCountries.map((key) => (\n          (key !== 'Kosovo')\n          && (\n            <li key={key} className=\"w-50\">\n              <Country\n                country={key}\n                totalConfirmed={countries[key].today_confirmed}\n                handleClick={handleClick}\n              />\n            </li>\n          )\n        ))}\n      </ul>\n      {!filteredCountries.length\n      && !loading\n      && <h3>SORRY, WE DON&apos;T HAVE RESULTS FOR YOUR SERCH!!! :(</h3>}\n    </div>\n  );\n};\n\nexport default Countries;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport PropTypes from 'prop-types';\n\n// const options = {\n//   scales: {\n//     yAxes: [\n//       {\n//         ticks: {\n//           beginAtZero: true,\n//           fontColor: '#fff',\n//         },\n//         gridLines: {\n//           color: '#000',\n//           lineWidth: 2,\n//           zeroLineColor: '#fff',\n//           zeroLineWidth: 2,\n//         },\n//         chartArea: {\n//           backgroundColor: 'rgba(251, 85, 85, 0.4)',\n//         },\n//       },\n//     ],\n//   },\n// };\n\nconst options = {\n  plugins: {\n    legend: {\n      labels: {\n        color: '#fff',\n        font: {\n          size: 14,\n        },\n      },\n    },\n  },\n  scales: {\n    y: {\n      ticks: {\n        color: '#fff',\n        font: {\n          size: 14,\n        },\n        stepSize: 1,\n        beginAtZero: true,\n      },\n    },\n    x: {\n      ticks: {\n        color: '#fff',\n        font: {\n          size: 14,\n        },\n        stepSize: 1,\n        beginAtZero: true,\n      },\n    },\n  },\n};\n\nconst LineChart = ({ chartData, type }) => {\n  const data = {\n    labels: ['1', '2', '3', '4', '5', '6', '7'],\n    datasets: [\n      {\n        label: `# of ${type}`,\n        data: chartData,\n        fill: false,\n        backgroundColor: 'transparent',\n        borderColor: '#E9BF27',\n        borderWidth: '1',\n        pointRadius: '3',\n      },\n    ],\n  };\n  return (\n    <>\n      <div className=\"d-flex stripe-text justify-content-between\">\n        <span className=\"m-1\">LAST 7 DAYS STATS</span>\n      </div>\n      <Line data={data} options={options} />\n    </>\n  );\n};\n\nLineChart.propTypes = {\n  chartData: PropTypes.arrayOf(PropTypes.number).isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default LineChart;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { Route, Switch, useRouteMatch } from 'react-router';\nimport { loadHistoryThunk, isLoading } from '../Redux/countries/countries';\nimport LineChart from './Chart';\nimport '../styling/CountryDetails.css';\n\nconst CountryDetails = ({ current, img }) => {\n  const dispatch = useDispatch();\n  const countryData = useSelector((state) => state.countriesReducer.countries[current]);\n  const historyData = useSelector((state) => state.countriesReducer.currentHistory);\n  const loading = useSelector((state) => state.countriesReducer.loading);\n  const [chartData, setChartData] = useState([]);\n  const history = useHistory();\n  const { path, url } = useRouteMatch();\n  const total = countryData.today_confirmed;\n\n  const tableRows = [\n    {\n      id: 1,\n      text: 'New cases',\n      value: countryData.today_new_confirmed,\n      url: 'newCases',\n      category: 'today_new_confirmed',\n    },\n    {\n      id: 2,\n      text: 'Recovered',\n      value: countryData.today_new_recovered,\n      url: 'recovered',\n      category: 'today_new_recovered',\n    },\n    {\n      id: 3,\n      text: 'Deaths',\n      value: countryData.today_new_deaths,\n      url: 'deaths',\n      category: 'today_new_deaths',\n    },\n    {\n      id: 4,\n      text: 'Total cases',\n      value: countryData.today_confirmed,\n      url: 'totalCases',\n      category: 'today_confirmed',\n    },\n    {\n      id: 5,\n      text: 'Total recovered',\n      value: countryData.today_recovered,\n      url: 'totalRecovered',\n      category: 'today_recovered',\n    },\n    {\n      id: 6,\n      text: 'Total deaths',\n      value: countryData.today_deaths,\n      url: 'totalDeaths',\n      category: 'today_deaths',\n    },\n  ];\n\n  const handleRoute = (route) => {\n    history.push(route);\n  };\n\n  const handleChartData = (category) => {\n    const dataArr = Object.keys(historyData).map((date) => {\n      const value = historyData[date].countries[current][category];\n      return value;\n    });\n    setChartData(dataArr);\n  };\n\n  useEffect(() => {\n    dispatch(isLoading());\n    dispatch(loadHistoryThunk(current));\n  }, [dispatch]);\n\n  return (\n    <div>\n      <div className=\"header d-flex p-1\">\n        <img\n          className=\"p-4 c-img\"\n          src={img}\n          alt=\"world-map\"\n          width=\"50%\"\n          height=\"50%\"\n        />\n        <div className=\"right-side d-flex flex-column align-items-center justify-content-center w-50 fw-bold\">\n          <h1 className=\"m-0 fs-3 lh-1 fw-bolder\">{current}</h1>\n          <span className=\"lh-1\">\n            {total && Intl.NumberFormat('de-DE').format(total)}\n          </span>\n          <span className=\"lh-1\">total cases</span>\n        </div>\n      </div>\n      <Switch>\n        <Route exact path={path}>\n          <div className=\"wrapper\">\n            <div className=\"d-flex stripe-text justify-content-between\">\n              <span className=\"m-1\">LATEST STATS</span>\n            </div>\n            <table className=\"table text-light border-0 align-middle \">\n              <tbody>\n                <tr>\n                  <td>Date</td>\n                  <td>{countryData.date}</td>\n                  <td> </td>\n                </tr>\n                {loading && <img className=\"loading-img\" src=\"virus-img.png\" alt=\"loader\" />}\n                {!loading && tableRows.map((tableData) => (\n                  <tr\n                    className=\"pointer\"\n                    key={tableData.id}\n                    onClick={() => {\n                      handleRoute(`${url}/${tableData.url}`);\n                      handleChartData(tableData.category);\n                    }}\n                  >\n                    <td>{tableData.text}</td>\n                    <td>{tableData.value}</td>\n                    <td>\n                      <i className=\"far fa-arrow-alt-circle-right \"> </i>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Route>\n        <Route exact path={`${path}/newCases`}>\n          <LineChart chartData={chartData} country={current} type=\"new Cases\" />\n        </Route>\n        <Route exact path={`${path}/recovered`}>\n          <LineChart chartData={chartData} country={current} type=\"recovered\" />\n        </Route>\n        <Route exact path={`${path}/deaths`}>\n          <LineChart chartData={chartData} country={current} type=\"deaths\" />\n        </Route>\n        <Route exact path={`${path}/totalCases`}>\n          <LineChart chartData={chartData} country={current} type=\"totalCases\" />\n        </Route>\n        <Route exact path={`${path}/totalRecovered`}>\n          <LineChart chartData={chartData} country={current} type=\"totalRecovered\" />\n        </Route>\n        <Route exact path={`${path}/totalDeaths`}>\n          <LineChart chartData={chartData} country={current} type=\"totalDeaths\" />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nCountryDetails.propTypes = {\n  current: PropTypes.string.isRequired,\n  img: PropTypes.string.isRequired,\n};\n\nexport default CountryDetails;\n","import '../styling/App.css';\nimport { Route, Switch } from 'react-router';\nimport { useSelector } from 'react-redux';\nimport Navbar from './Navbar';\nimport Countries from './Countries';\nimport CountryDetails from './CountryDetails';\nimport countryIso from '../libraries/countryIso';\n\nfunction App() {\n  const currentCountry = useSelector((state) => state.countriesReducer.currentCountry);\n  const iso = countryIso[currentCountry];\n  const imgLink = iso ? `https://raw.githubusercontent.com/djaiss/mapsicon/33ba28808f8d32b5bae0ffada9cadd07073852e1/all/${iso.toLowerCase()}/vector.svg` : '/World_map.png';\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/\">\n          <Countries />\n        </Route>\n        <Route path=\"/country\">\n          <CountryDetails current={currentCountry} img={imgLink} />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { countriesReducer } from './countries/countries';\n\nconst reducer = combineReducers({\n  countriesReducer,\n});\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger, thunk),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './styling/index.css';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './Redux/storeConfig';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}